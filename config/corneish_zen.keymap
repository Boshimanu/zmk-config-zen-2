#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

&mmv { acceleration-exponent = <2>; };

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_6col_layout;

        // zmk,physical-layout = &foostan_corne_5col_layout;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        EscapeGrave {
            bindings = <&gresc>;
            key-positions = <2 3>;
            timeout-ms = <30>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        Cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 26>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0>;
        };

        Copy {
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0>;
        };

        Paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0>;
        };

        Del {
            bindings = <&kp DELETE>;
            key-positions = <3 4>;
            timeout-ms = <30>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };
    };

    behaviors {
        ht_bck: ht_bck {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BCK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <12>;
            tapping-term-ms = <145>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <140>;
            flavor = "balanced";
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&none>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <145>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
        };

        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "AutoShift";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <145>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
        };

        lhmrow: lhmrow {
            compatible = "zmk,behavior-hold-tap";
            label = "LHMROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        rhmrow: rhmrow {
            compatible = "zmk,behavior-hold-tap";
            label = "RHMROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <27 0 1 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 2 3 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            display-name = "Colemak";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&as LS(TAB) TAB                  &kp Q            &kp W               &kp F                 &kp P               &kp G        &kp J    &kp L                &kp I                  &kp O                &kp P            &kp BACKSLASH
&ht_bck LA(BACKSPACE) BACKSPACE  &lhmrow LCTRL A  &lhmrow LEFT_ALT R  &lhmrow LEFT_SHIFT S  &lhmrow LEFT_GUI T  &kp D        &kp H    &rhmrow RIGHT_GUI N  &rhmrow RIGHT_SHIFT E  &rhmrow RIGHT_ALT I  &rhmrow RCTRL O  &kp SQT
&kp LSHFT                        &kp Z            &kp X               &kp C                 &kp V               &kp B        &kp K    &kp M                &kp COMMA              &kp DOT              &kp FSLH         &kp RIGHT_SHIFT
                                                                      &lt 5 LG(SPACE)       &lt 0 SPACE         &kp ENTER    &kp RET  &lt 0 SPACE          &mo 4
            >;
        };

        numbers {
            bindings = <
&trans  &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &kp CAPSLOCK
&trans  &kp N1        &kp N2      &kp N3         &kp N4        &kp N5           &kp N6         &kp N7        &kp N8        &kp N9        &kp N0        &as PLUS EQUAL
&trans  &trans        &trans      &trans         &trans        &trans           &trans         &trans        &trans        &trans        &trans        &trans
                                  &trans         &trans        &trans           &trans         &trans        &trans
            >;
        };

        move {
            bindings = <
&trans  &trans  &msc SCRL_DOWN  &mmv MOVE_UP    &msc SCRL_UP     &trans       &trans  &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  &trans  &trans
&trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans       &trans  &kp LEFT      &kp DOWN  &kp RIGHT      &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans       &trans  &kp LG(LEFT)  &trans    &kp LG(RIGHT)  &trans  &trans
                                &trans          &mkp LCLK        &mkp RCLK    &trans  &trans        &trans
            >;
        };

        Bt_Sys {
            display-name = "BT_Sys";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans  &trans
                                        &kp LGUI      &trans        &kp SPACE       &kp RET   &trans    &kp RALT
            >;
        };

        Italian {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Emoji {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        BT_Sys {
            if-layers = <1>;
            then-layer = <2>;
        };
    };
};
