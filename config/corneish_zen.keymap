#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv {
    acceleration-exponent = <2>;
    time-to-max-speed-ms = <200>;
};

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_6col_layout;

        // zmk,physical-layout = &foostan_corne_5col_layout;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        EscapeGrave {
            bindings = <&gresc>;
            key-positions = <2 3>;
            timeout-ms = <30>;
            layers = <0 2 1>;
            require-prior-idle-ms = <50>;
        };

        Cut {
            bindings = <&kp LG(X)>;
            key-positions = <25 26>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 1>;
        };

        Copy {
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 1>;
        };

        Paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 1>;
        };

        Del {
            bindings = <&kp DELETE>;
            key-positions = <3 4>;
            timeout-ms = <30>;
            layers = <0 1>;
            require-prior-idle-ms = <50>;
        };
    };

    behaviors {
        ht_bck: ht_bck {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BCK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <12>;
            tapping-term-ms = <145>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <140>;
            flavor = "balanced";
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <145>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
        };

        as: as {
            compatible = "zmk,behavior-hold-tap";
            label = "AutoShift";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <145>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
        };

        lhmrow: lhmrow {
            compatible = "zmk,behavior-hold-tap";
            label = "LHMROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <37 6 7 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 8 38 36>;
        };

        rhmrow: rhmrow {
            compatible = "zmk,behavior-hold-tap";
            label = "RHMROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 40 39 41>;
        };

        mk_capt: mk_capt {
            compatible = "zmk,behavior-tap-dance";
            label = "MK_CAPT";
            #binding-cells = <0>;
            bindings =
                <&ht LS(LC(LG(NUMBER_4))) LG(LS(NUMBER_2))>,
                <&ht LS(LG(N5)) LS(LG(NUMBER_4))>;

            tapping-term-ms = <165>;
        };

        it_e: it_e {
            compatible = "zmk,behavior-hold-tap";
            label = "IT_E";
            bindings = <&it_shift_egrav>, <&it_egrav>;

            #binding-cells = <2>;
            tapping-term-ms = <145>;
            quick-tap-ms = <50>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
        };

        dt_ameth: dt_ameth {
            compatible = "zmk,behavior-tap-dance";
            label = "DT_AMETH";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(O))>, <&kp LA(LS(D))>, <&kp LS(LA(J))>;

            tapping-term-ms = <165>;
        };
    };

    macros {
        it_egrav: it_egrav {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LG(LC(I))) &kp LEFT_BRACKET &kp LC(LA(LG(E)))>;
            label = "IT_EGRAV";
            wait-ms = <30>;
            tap-ms = <0>;
        };

        it_shift_egrav: it_shift_egrav {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(I))) &kp LS(LEFT_BRACKET) &kp LA(LC(LG(E)))>;
            label = "IT_SHIFT_EGRAV";
            wait-ms = <30>;
        };

        it_i: it_i {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(I))) &kp EQUAL &kp LA(LC(LG(E)))>;
            label = "IT_I";
            wait-ms = <30>;
        };

        it_o: it_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(I))) &kp SEMICOLON &kp LA(LC(LG(E)))>;
            label = "IT_O";
            wait-ms = <30>;
        };

        it_u: it_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(I))) &kp NON_US_BACKSLASH &kp LA(LC(LG(E)))>;
            label = "IT_U";
            wait-ms = <30>;
        };

        it_a: it_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LG(I))) &kp SQT &kp LA(LC(LG(E)))>;
            label = "IT_A";
            wait-ms = <30>;
        };

        efp: efp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp F &kp P>;
            label = "EFP";
            wait-ms = <30>;
        };

        laugh: laugh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp L &kp A>;
            label = "LAUGH";
            wait-ms = <30>;
        };

        eok: eok {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp O &kp K>;
            label = "EOK";
            wait-ms = <30>;
        };

        ethank: ethank {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp T &kp H>;
            label = "ETHANK";
            wait-ms = <30>;
        };

        esmile: esmile {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp S &kp M>;
            label = "ESMILE";
            wait-ms = <30>;
        };

        esad: esad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp S &kp A &kp D>;
            label = "ESAD";
            wait-ms = <30>;
        };

        elove: elove {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp L &kp V>;
            label = "ELOVE";
            wait-ms = <30>;
        };

        ehmmm: ehmmm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp H &kp M>;
            label = "EHMMM";
            wait-ms = <30>;
        };

        ecoffe: ecoffe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UNDER &kp C &kp F>;
            label = "ECOFFE";
            wait-ms = <30>;
        };

        doublecmd: doublecmd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp LEFT_GUI>;
            label = "DOUBLECMD";
            wait-ms = <20>;
        };

        doublectrl: doublectrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LCTRL>;
            label = "DOUBLECTRL";
            wait-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            display-name = "Colemak";
            bindings = <
&as LS(TAB) TAB                  &kp Q            &kp W               &kp F                 &kp P               &kp G             &kp J                &kp L                &kp U                  &kp Y                &kp SEMICOLON    &kp BACKSLASH
&ht_bck LA(BACKSPACE) BACKSPACE  &lhmrow LCTRL A  &lhmrow LEFT_ALT R  &lhmrow LEFT_SHIFT S  &lhmrow LEFT_GUI T  &kp D             &kp H                &rhmrow RIGHT_GUI N  &rhmrow RIGHT_SHIFT E  &rhmrow RIGHT_ALT I  &rhmrow RCTRL O  &kp SQT
&kp LSHFT                        &kp Z            &kp X               &kp C                 &kp V               &kp B             &kp K                &kp M                &kp COMMA              &kp DOT              &kp FSLH         &kp RIGHT_SHIFT
                                                                      &lt 4 LG(SPACE)       &lt 1 SPACE         &ht LGUI ENTER    &ht RIGHT_GUI ENTER  &lt 2 SPACE          &lt 3 LEFT_SHIFT
            >;
        };

        numbers {
            display-name = "Numbers";
            bindings = <
&trans         &kp LS(EXCL)                 &kp LS(AT)                     &kp LS(POUND)          &kp LS(DLLR)         &kp LS(PRCNT)    &kp LS(CARET)   &kp LS(AMPS)          &kp LS(STAR)            &kp LS(LPAR)          &kp LS(RPAR)      &kp CAPSLOCK
&kp BACKSPACE  &lhmrow LCTRL N1             &lhmrow LEFT_ALT N2            &lhmrow LEFT_SHIFT N3  &lhmrow LEFT_GUI N4  &kp N5           &kp N6          &rhmrow RIGHT_GUI N7  &rhmrow RIGHT_SHIFT N8  &rhmrow RIGHT_ALT N9  &rhmrow RCTRL N0  &as PLUS EQUAL
&mk_capt       &ht LEFT_BRACE LEFT_BRACKET  &ht RIGHT_BRACE RIGHT_BRACKET  &kp LC(LEFT_ARROW)     &kp LC(RIGHT)        &dt_ameth        &ht PLUS EQUAL  &ht UNDERSCORE MINUS  &trans                  &trans                &trans            &ht GRAVE TILDE
                                                                           &kp LS(LA(B))          &trans               &trans           &trans          &trans                &trans
            >;

            label = "Numbers";
        };

        move {
            display-name = "Move";
            bindings = <
&trans  &trans  &msc SCRL_DOWN  &mmv MOVE_UP    &msc SCRL_UP     &trans       &kp DELETE        &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  &trans      &kp PAGE_UP
&trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans       &kp LG(UP_ARROW)  &kp LEFT      &kp DOWN  &kp RIGHT      &kp INSERT  &kp PAGE_DOWN
&trans  &trans  &msc SCRL_LEFT  &trans          &msc SCRL_RIGHT  &trans       &kp LG(DOWN)      &kp LG(LEFT)  &trans    &kp LG(RIGHT)  &kp HOME    &kp END
                                &trans          &mkp LCLK        &mkp RCLK    &trans            &trans        &trans
            >;

            label = "Move";
        };

        Italian {
            display-name = "IT";
            bindings = <
&kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_MUTE  &kp K_VOLUME_DOWN     &kp K_VOLUME_UP         &trans      &trans      &it_u       &trans      &trans      &trans
&trans      &it_a             &trans      &trans      &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC    &trans      &trans      &it_e 0 0   &it_i       &it_o       &trans
&trans      &kp LG(N1)        &kp LG(N2)  &kp LG(N3)  &kp LG(N4)            &kp LG(N5)              &kp LG(N6)  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp LG(N0)  &trans
                                          &trans      &trans                &trans                  &trans      &trans      &trans
            >;

            label = "IT";
        };

        Emoji {
            display-name = "Emoji";
            bindings = <
&trans  &trans  &elove   &efp        &ehmmm       &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &laugh  &esmile  &eok        &ethank      &esad     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans   &doublecmd  &doublectrl  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                         &trans      &trans       &trans    &trans  &trans  &trans
            >;

            label = "Emoji";
        };

        Bt_Sys {
            display-name = "BT_Sys";
            bindings = <
&kp F1       &kp F2           &kp F3           &kp F4           &kp F5           &kp F6             &kp F7           &kp F8           &kp F9           &kp F10          &kp F11          &kp F12
&bt BT_CLR   &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &trans           &kp LEFT_GUI     &kp LEFT_SHIFT   &kp LEFT_ALT     &kp LCTRL        &rgb_ug RGB_TOG
&bootloader  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_SPD    &rgb_ug RGB_SPI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_HUD  &rgb_ug RGB_HUD  &bootloader
                                               &trans           &trans           &sys_reset         &sys_reset       &trans           &trans
            >;

            label = "BT-SYS";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        BT_Sys {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };
};
